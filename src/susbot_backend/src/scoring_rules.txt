# AI Scoring Heuristics for SusBot Trust Score

This document outlines the heuristic rules the AI model should follow when generating the `score` (0-100) and `verdict` ("Safe", "Moderate", "High Risk") for a smart contract. The goal is to provide a consistent and transparent assessment based on identified risks and contract attributes.

## 1. Initial Score & Baseline

* Start with a baseline score of **100**. All deductions will be applied from this initial score.

## 2. Risk-Based Deductions

The following deductions should be applied based on the severity and presence of identified risks. Multiple risks are cumulative.

### A. High Severity Risks (Critical Vulnerabilities)

These risks represent severe security flaws or malicious intent, leading to significant deductions.

* **Unprotected Ether Withdrawal / Arbitrary Fund Withdrawal:**
    * **Deduction:** -25 to -30 points
    * **Reason:** Allows unauthorized parties to drain funds. Critical.
* **Infinite Minting / Unlimited Token Creation:**
    * **Deduction:** -25 to -30 points
    * **Reason:** Hyperinflation risk, making token worthless. Critical.
* **Self-Destruct Function (without legitimate purpose):**
    * **Deduction:** -20 to -25 points
    * **Reason:** Contract can be destroyed, making funds or functionality inaccessible. Critical.
* **Owner Can Blacklist Users / Transfer Freezing:**
    * **Deduction:** -15 to -20 points
    * **Reason:** Centralized control over user assets, anti-decentralization. High centralization risk.
* **Known Scam Association (e.g., owner address flagged):**
    * **Deduction:** -30 to -40 points
    * **Reason:** Direct link to fraudulent activity. Extremely high risk.

### B. Medium Severity Risks (Significant Concerns)

These risks indicate notable weaknesses or potential for exploitation.

* **Pausable Contract (Owner can pause transfers/functions):**
    * **Deduction:** -10 to -15 points
    * **Reason:** Centralized control, potential for rug pull or censorship.
* **High Token Concentration (Single address holds > 70-80%):**
    * **Deduction:** -10 to -15 points
    * **Reason:** High risk of manipulation (pump-and-dump).
* **Proxy Contract without Proper Upgradeability Controls:**
    * **Deduction:** -10 to -15 points
    * **Reason:** Malicious upgrade could change contract behavior.
* **Renounce Ownership Possible (but not yet renounced for critical functions):**
    * **Deduction:** -5 to -10 points
    * **Reason:** If ownership isn't renounced for critical functions post-launch, it maintains centralization risk.

### C. Low Severity Risks (Minor Issues/Warnings)

These risks are less critical but indicate sub-optimal practices or minor vulnerabilities.

* **Outdated Compiler Version (pragma < 0.8.0):**
    * **Deduction:** -5 points
    * **Reason:** Lacks modern built-in checks (e.g., overflow/underflow).
* **Missing Event Emits for Critical Actions:**
    * **Deduction:** -3 points
    * **Reason:** Reduces transparency and off-chain monitoring capabilities.
* **Hardcoded Gas Limits / Values:**
    * **Deduction:** -2 to -5 points
    * **Reason:** May cause issues if network conditions change.

## 3. Contract Attribute Adjustments (Bonuses/Penalties)

These factors affect the score independently of specific "risks" identified by the backend's static analysis, but are crucial for overall trust.

* **Source Code Not Verified on Etherscan/Block Explorer (`verified` is false):**
    * **Deduction:** -20 points
    * **Reason:** Impossible to audit the deployed code, major red flag for transparency.
* **Poor Token Distribution (`good_distribution` is false):**
    * **Deduction:** -10 points (This is separate from High Token Concentration risk, if the backend provides a dedicated flag for it. If `High Token Concentration` is the only way this is reported, merge it with that deduction.)
    * **Reason:** Indicates potential for manipulation by a few large holders.

## 4. Verdict Mapping (Based on Final Score)

The AI should assign a verdict descriptor based on the final calculated score.

* **Safe:** Score >= 85
* **Moderate:** Score 50 - 84
* **High Risk:** Score < 50

## 5. Score Breakdown Logic for `score_breakdown` Field

The AI should provide a `score_breakdown` dictionary to explain its scoring. This dictionary should include:

* `initial_score`: Always 100.
* `deductions`: A dictionary where keys are categories of risks/attributes (e.g., "critical_vulnerabilities", "centralization_risks", "transparency_issues") or specific risk names, and values are the total points deducted for that category.
    * Example: `{"unprotected_ether_withdrawal": -25, "outdated_compiler": -5, "not_verified": -20}`
* `bonuses`: (Optional) If the AI applies any positive adjustments for exemplary practices, list them here.
* `final_calculated`: The sum of `initial_score` and all `deductions`/`bonuses`.

## 6. Recommendations Logic for `recommendations` Field

The AI should generate a list of concise, actionable recommendations based *only* on the identified risks and negative attributes. Each recommendation should be a separate string in the list.

* **General Guidance:** Recommendations should be practical advice for the contract developers or potential users.
* **Example:** If "Unprotected Ether Withdrawal" is a risk, a recommendation should be "Implement strict access controls on any withdrawal functions."
* **No Risks:** If the score is high and no significant risks are found, the recommendations list can be empty or contain general positive statements like "No specific recommendations needed, contract appears well-designed."